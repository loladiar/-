#!/usr/bin/env jruby -E windows-1250

%w{optparse json}.each { |e| require e }

def parse_options(options = {})
  OptionParser.new do |p|
    p.on('-k', '--categories INTEGER', Integer, 'Specifies the # of categories (default: 24).') { |v| options[:categories] = v }
    p.on('-w', '--features INTEGER', Integer, 'Specifies # of features (default: 2048).') { |v| options[:features] = v }
    p.on('-m', '--model PATH', String, 'Specifies the model file path (default: "model.sdg").') { |v| options[:model] = v }
    p.on('-r', '--raw', 'Specifies whether to output raw predictions.') { |v| options[:raw] = v }
    p.on('-x', '--others FLOAT', Float, 'Specifies whether to classify as "Others".') { |v| options[:others] = v }
    p.on('-o', '--output PATH', String, 'Specifies the prediction output path.') { |v| options[:output] = v }
  end.parse!
  options
end

def run!
  options = parse_options
  sgd = SGD.new(options[:categories] || 24, options[:features] || 22000)
  sgd.read(options[:model] || 'model.sdg')
  out = options[:output] ? open(options[:output], 'w') : $stdout
  ARGF.each do |e| 
    text = e.chomp.split(' | ')[-1]
    raw = sgd.classify(v = sgd.vectorize(text, ngram = 2))
    j v.iterate_non_zero.map { |e| [e.index, e.get] } if options[:output]
    if options[:raw]
      out.puts raw.map { |e| e.round(3) }.inspect
    else
      ei = raw.each_with_index.max
      out.puts options[:others] && ei[0] < options[:others] ? 0 : ei[1] + 1
    end
  end
  sgd.close
end

run! if __FILE__==$0
