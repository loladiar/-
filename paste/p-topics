#!/usr/bin/env jruby

%W(optparse json #{ENV['HADOOP_BASE']}/libexec/lib/text-1.0-SNAPSHOT.jar).each { |e| require e }
%w(
  com.google.guava:guava:14.0.1
  commons-logging:commons-logging:1.1.1
  log4j:log4j:1.2.17
  org.apache.avro:avro:1.5.3
  org.apache.commons:commons-math3:3.2
  org.apache.hadoop:hadoop-common:2.0.5-alpha
  org.apache.lucene:lucene-analyzers-common:4.3.0
  org.apache.lucene:lucene-core:4.3.0
  org.apache.mahout:mahout-core:0.8
  org.apache.mahout:mahout-math:0.8
  org.slf4j:slf4j-api:1.6.1
  org.slf4j:slf4j-log4j12:1.6.1
).map do |e|
  g, a, v = e.split(':')
  jar = "#{ENV['HOME']}/.m2/repository/#{g.gsub(/\./, '/')}/#{a}/#{v}/#{a}-#{v}.jar"
  system "mvn dependency:get -DremoteRepositories=http://download.java.net/maven2 -Dartifact=#{e}" unless File.exist?(jar)
  require jar
end

$options = {}
OptionParser.new do |p|
  p.on('-m', '--model_id STRING', String, 'Specifies optional model id.') { |v| $options[:model_id] = v }
  p.on('-s', '--sort',                    'Sorts out topic probability values.') { $options[:sort] = true }
  p.on('-k', '--min-value FLOAT', Float,  'Yields fields of values no smaller than specified (default 2.0).') { |v| $options[:min_value] = v }
end.parse!

sort = $options[:sort] || false
min_value = $options[:min_value] || 2.0
model_id = $options[:model_id] || 'unigram-rrc-pro-22k'
# system "rm -rf /tmp/#{model_id}"
system "curl -o '/tmp/#{model_id}/#1' -ksL 'http://s3.amazonaws.com/#{ENV['S3_BUCKET']}/#{model_id}/{dictionary.file-0,model-0,df-count-0}' --create-dirs" unless Dir.exist?("/tmp/#{model_id}")

$stderr.puts "DEBUG: openning model files (id: #{model_id})"
org.apache.log4j.Logger.root_logger.level = org.apache.log4j.Level::OFF
dictionary, model, df = %w(dictionary.file-0 model-0 df-count-0).map { |e| open("/tmp/#{model_id}/#{e}").to_inputstream }
begin
  topic_modeling = com.henry4j.text.TopicModeling.new(dictionary, model, 'com.henry4j.text.CommTextAnalyzer', df)
ensure
  [dictionary, model, df].each { |e| e.close }
end

p_topic = lambda do |s|
  a = topic_modeling.get_ptopic(s).to_ary
  j sort ? a.each_with_index.sort_by { |e| -e[0] }.reduce({}) { |h, e| e[0] *= 100; h[e[1]] = e[0].round(1) unless e[0] < min_value; h } : a
end

if ARGV.empty?
  $stderr.puts 'DEBUG: begins reading lines'
  p_topic.call($_) while gets
  $stderr.puts 'DEBUG: ends reading lines'
else
  ARGV.each { |e| p_topic.call(e) }
end
exit 0
