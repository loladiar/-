#!/usr/bin/env jruby -E windows-1250

require 'optparse'

class SGD
  # http://mahout.apache.org/users/classification/logistic-regression.html
  def self.require_jars
    %w(
      com.google.guava:guava:16.0
      log4j:log4j:1.2.17
      org.apache.commons:commons-math3:3.2
      org.apache.hadoop:hadoop-core:1.2.1
      org.apache.lucene:lucene-analyzers-common:4.3.0
      org.apache.lucene:lucene-core:4.3.0
      org.apache.mahout:mahout-core:0.8
      org.apache.mahout:mahout-math:0.8
      org.slf4j:slf4j-api:1.6.1
      org.slf4j:slf4j-log4j12:1.6.1
    ).map do |e|
      g, a, v = e.split(':')
      jar = "#{ENV['HOME']}/.m2/repository/#{g.gsub(/\./, '/')}/#{a}/#{v}/#{a}-#{v}.jar"
      system "mvn dependency:get -DremoteRepositories=http://download.java.net/maven2 -Dartifact=#{e}" unless File.exist?(jar)
      require jar
    end
  end

  def initialize(categories, features)
    @@jars ||= SGD.require_jars
    @@values ||= org.apache.mahout.math.DenseVector.java_class.declared_field('values').tap { |f| f.accessible = true }
    @categories, @features = categories, features
  end

  def vectorize(words, v = org.apache.mahout.math.RandomAccessSparseVector.new(@features))
    @enc ||= org.apache.mahout.vectorizer.encoders.AdaptiveWordValueEncoder.java_class.constructor(java.lang.String).new_instance('contents').to_java.tap { |e| e.probes = 2 }
    words.each { |w| @enc.addToVector(w, v) }
    v
  end

  def train(category, instance)
    @lr ||= org.apache.mahout.classifier.sgd.AdaptiveLogisticRegression.new(@categories, @features, org.apache.mahout.classifier.sgd.L1.new)
    @lr.train(category, instance) # e in [actual, instance]
    self
  end

  def classify(instance)
    @lr.classifyFull(v = org.apache.mahout.math.DenseVector.new(@categories), instance)
    @@values.value(v).to_a
  end

  def close
    @lr.close
  end

  def write(model)
    dos = java.io.DataOutputStream.new(open(model, 'w').to_outputstream)
    begin
      org.apache.mahout.classifier.sgd.PolymorphicWritable.write(dos, @lr.best.payload.learner)
    ensure
      dos.close
    end
  end

  def read(model)
    dis = java.io.DataInputStream.new(open(model, 'r').to_inputstream)
    begin
      @lr = org.apache.mahout.classifier.sgd.PolymorphicWritable.read(dis, org.apache.mahout.classifier.sgd.CrossFoldLearner.java_class)
    ensure
      dis.close
    end
  end
end # the end of class SGD

def parse_options(options = {})
  OptionParser.new do |p|
    p.on('-k', '--categories INTEGER', Integer, 'Specifies the # of categories (default: 24).') { |v| options[:categories] = v }
    p.on('-w', '--features INTEGER', Integer, 'Specifies # of features (default: 2048).') { |v| options[:features] = v }
    p.on('-m', '--model PATH', String, 'Specifies the model file path (default: "model.sdg").') { |v| options[:model] = v }
    p.on('-r', '--raw', 'Specifies whether to output raw predictions.') { |v| options[:raw] = v }
  end.parse!
  options
end

def run!
  options = parse_options
  sgd = SGD.new(options[:categories] || 24, options[:features] || 2048)
  begin
    ARGF.each do |e| 
      e = e.split(' | ')
      sgd.train(e[0].to_i - 1, sgd.vectorize(e[0].split))
      print '.'
    end
  ensure
    sgd.close
  end
  sgd.write(options[:model] || 'model.sdg')
  puts
end

run! if __FILE__==$0
