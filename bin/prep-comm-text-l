#!/usr/bin/env ruby
%w{optparse fileutils open-uri csv}.each { |e| require e }

$options = {}
OptionParser.new do |p|
  p.on('-s', '--skip-entries INTEGER', Integer, 'Skips processing as many entries as specified (default: 1).') { |v| $options[:skip_count] = v }
  p.on('-n', '--max-entries INTEGER', Integer, 'Processes as many entries as specified.') { |v| $options[:max_entries] = v }
  p.on('-d', '--out-dir PATH', String, 'Specifies an optional output directory path (default: /tmp/).') { |v| $options[:out_dir] = v }
  p.on('-i', '--id-field INTEGER', Integer, 'Specifies required field index for document id.') { |v| $options[:id_field] = v }
  p.on('-l', '--l-field INTEGER', Integer, 'Specifies required field index for label(s).') { |v| $options[:l_field] = v }
  p.on('-f', '--fields i,j,k', Array, 'Specifies required field indices for feature(s).') { |v| $options[:fields] = v }
  p.on('-x', '--stop-phrases PATH', String, 'Specifies optional file paths for stop-phrases.') { |v| $options[:stop_phrases] = v }
end.parse!

max_entries = $options[:max_entries]
out_dir = $options[:out_dir] || '/tmp/'
id_field = $options[:id_field] || 4
l_field = $options[:l_field] || 8
fields = ($options[:fields] || ['1', '3']).map { |e| e.to_i }
stop_phrases = $options[:stop_phrases] || File.expand_path('../stop-comm-text', File.realpath(__FILE__))
stop_phrases = File.exists?(stop_phrases) ? open(stop_phrases).readlines.reduce([]) { |a, l| l.start_with?('#') ? a : a << l.chomp } : nil
stop_phrases = /#{stop_phrases.join('|')}/ if stop_phrases
puts stop_phrases

ARGV.each do |e|
  open(e, 'r:windows-1250') do |f|
    skip_count = $options[:skip_count] || 1
    CSV.new(f).each do |l|
      next if (skip_count -= 1) >= 0
      break if max_entries && (max_entries -= 1) < 0
      FileUtils.mkdir_p out_dir unless Dir.exists?(out_dir)
      path = File.join(out_dir, l[id_field] + ".txt")
      puts "WARN: will over-write '#{path}'!!!" if File.exists?(path)
      open(path, 'w:UTF-8') do |w| 
        fields.each do |f| 
          begin
            w.puts stop_phrases ? l[f].gsub(stop_phrases, '.') : l[f] if l[f]
          rescue
            raise 'Failed to process a line: %s.' % [l]
          end
        end
      end
      puts "INFO: done writing to '#{path}'."
    end
  end
end
